# -*- coding: utf-8 -*-
"""modelling_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JW6Behfbj4O1T4mWV9ZeHfvqs4i__Dt5
"""
import os
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

# ==== KONFIG DAGSHUB ====
os.environ["MLFLOW_TRACKING_USERNAME"] = "cikalfirdansyah"
os.environ["MLFLOW_TRACKING_PASSWORD"] = "03e01ee63e269407ae4da6a3213568d711745fe7"
mlflow.set_tracking_uri("https://dagshub.com/cikalfirdansyah/telco-churn-mlops.mlflow")
mlflow.set_experiment("Modelling dan Tuning Eksperimen")

# === Load dataset ===
df = pd.read_csv("telco_preprocessing.csv")

# === Split fitur dan label ===
X = df.drop(columns=["Churn"])
y = df["Churn"]

# Deteksi kolom kategorikal dan numerik
cat_cols = X.select_dtypes(include="object").columns.tolist()
num_cols = X.select_dtypes(include=np.number).columns.tolist()

# === Preprocessing Pipeline ===
preprocessor = ColumnTransformer([
    ('num', StandardScaler(), num_cols),
    ('cat', OneHotEncoder(handle_unknown="ignore"), cat_cols)
])

# === Pipeline Model ===
pipeline = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('classifier', RandomForestClassifier(random_state=42))
])

# === Hyperparameter Grid ===
param_grid = {
    'classifier__n_estimators': [50, 100],
    'classifier__max_depth': [5, 10],
    'classifier__min_samples_split': [2, 5, 10]
}

# === Split Data ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# === MLflow Manual Logging ===
with mlflow.start_run():
    grid_search = GridSearchCV(pipeline, param_grid, cv=3, n_jobs=-1)
    grid_search.fit(X_train, y_train)

    best_model = grid_search.best_estimator_
    y_pred = best_model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred, pos_label=1)
    rec = recall_score(y_test, y_pred, pos_label=1)


    tn, fp, fn, tp = confusion_matrix(y_test, y_pred, labels=[0, 1]).ravel()

    # Logging manual parameter dan metric
    mlflow.log_params(grid_search.best_params_)
    mlflow.log_metrics({
        "accuracy": acc,
        "precision": prec,
        "recall": rec,
        "true_positive": tp,
        "true_negative": tn,
        "false_positive": fp,
        "false_negative": fn
    })

    # Logging model
    mlflow.sklearn.log_model(
        sk_model=best_model,
        artifact_path="model",
        registered_model_name="Modelling-dan-Tuning-Registry"
    )


